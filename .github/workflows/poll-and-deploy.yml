name: Poll, Build, Deploy (Staging â†’ Prod)

on:
  schedule:
    - cron: "*/5 * * * *" # every 5 minutes
  workflow_dispatch:

env:
  APP_REPO: cl00dz/spectralshield-code
  IMAGE_NAME: ghcr.io/${{ secrets.GHCR_USERNAME }}/spectralshield
  HEALTHCHECK_URL: ${{ secrets.HEALTHCHECK_URL || '' }}

jobs:
  poll-build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout deploy repo
      uses: actions/checkout@v4

    - name: Fetch latest commit from app repo
      run: |
        rm -rf app || true
        git clone https://github.com/${APP_REPO}.git app
        cd app
        git log -1 --pretty=format:"%H %ct %s" > ../_latest.txt
        echo "LATEST=$(cut -d' ' -f1 ../_latest.txt)" >> $GITHUB_ENV
        echo "COMMIT_TS=$(cut -d' ' -f2 ../_latest.txt)" >> $GITHUB_ENV

    - name: Compare last built commit
      id: hashcheck
      run: |
        test -f last_build.txt || touch last_build.txt
        if grep -q "$LATEST" last_build.txt; then
          echo "updated=false" >> $GITHUB_OUTPUT
        else
          echo "updated=true" >> $GITHUB_OUTPUT
        fi

    - name: Stop if nothing changed
      if: steps.hashcheck.outputs.updated == 'false'
      run: echo "No new commits. Exiting."

    - name: Set version tags
      if: steps.hashcheck.outputs.updated == 'true'
      run: |
        SHA=${LATEST:0:12}
        DATE=$(date -u +"%Y%m%d")
        echo "TAG_SHA=$SHA" >> $GITHUB_ENV
        echo "TAG_DATE=$DATE" >> $GITHUB_ENV
        echo "TAG_RUN=${DATE}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

    - name: Log in to GHCR
      if: steps.hashcheck.outputs.updated == 'true'
      run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u "${{ secrets.GHCR_USERNAME }}" --password-stdin

    - name: Build & Push image (latest + SHA + run)
      if: steps.hashcheck.outputs.updated == 'true'
      run: |
        docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:${TAG_SHA} -t $IMAGE_NAME:${TAG_RUN} ./app
        docker push $IMAGE_NAME:latest
        docker push $IMAGE_NAME:${TAG_SHA}
        docker push $IMAGE_NAME:${TAG_RUN}

    - name: Save last built commit
      if: steps.hashcheck.outputs.updated == 'true'
      run: |
        echo "$LATEST $(date -u)" >> last_build.txt
        git config user.name "github-actions"
        git config user.email "github-actions@users.noreply.github.com"
        git add last_build.txt
        git commit -m "CI: built $LATEST"
        git push

    - name: Write SSH key
      if: steps.hashcheck.outputs.updated == 'true'
      run: |
        echo "${{ secrets.SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: Deploy to STAGING (Portainer node)
      if: steps.hashcheck.outputs.updated == 'true'
      run: |
        ./scripts/deploy_remote.sh \
          --host "${{ secrets.SSH_HOST }}" \
          --user "${{ secrets.SSH_USER }}" \
          --key "key.pem" \
          --remote-dir "/opt/spectralshield-staging" \
          --compose "deploy/docker-compose.staging.yml" \
          --image "$IMAGE_NAME:${TAG_SHA}"

    - name: Healthcheck STAGING
      if: steps.hashcheck.outputs.updated == 'true'
      run: |
        if [ -n "$HEALTHCHECK_URL" ]; then
          ./scripts/healthcheck.sh "$HEALTHCHECK_URL"
        else
          echo "No HEALTHCHECK_URL set; skipping healthcheck."
        fi

    - name: Promote to PROD
      if: steps.hashcheck.outputs.updated == 'true'
      run: |
        gh api repos/${{ github.repository }}/actions/workflows/promote-to-prod.yml/dispatches \
          -H "Authorization: token ${{ secrets.PAT_DEPLOY || secrets.GHCR_TOKEN }}" \
          -f ref="${{ github.ref_name }}" \
          -F inputs[target_tag]="${TAG_SHA}"

